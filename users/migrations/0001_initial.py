# Generated by Django 3.1.12 on 2025-09-30 19:13

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('matricule', models.CharField(help_text='Matricule unique (ex: UOM2025-001)', max_length=10, unique=True, validators=[django.core.validators.RegexValidator(message='Le matricule doit être au format UOM2025-001', regex='^UOM\\d{4}-\\d{3}$')])),
                ('user_type', models.CharField(choices=[('etudiant', 'Étudiant'), ('enseignant', 'Enseignant'), ('admin', 'Administrateur')], default='etudiant', help_text="Type d'utilisateur", max_length=20)),
                ('birth_date', models.DateField(blank=True, help_text='Date de naissance', null=True)),
                ('birth_place', models.CharField(blank=True, help_text='Lieu de naissance', max_length=100)),
                ('phone', models.CharField(blank=True, help_text='Numéro de téléphone', max_length=15)),
                ('is_first_login', models.BooleanField(default=True, help_text='Première connexion (doit changer le mot de passe)')),
                ('is_active_student', models.BooleanField(default=False, help_text='Compte étudiant activé (après première connexion)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'ordering': ['matricule'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(blank=True, help_text='Département', max_length=100)),
                ('speciality', models.CharField(blank=True, help_text='Spécialité', max_length=100)),
                ('office', models.CharField(blank=True, help_text='Bureau', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Enseignant',
                'verbose_name_plural': 'Profils Enseignants',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('niveau', models.CharField(blank=True, choices=[('L1', 'Licence 1'), ('L2', 'Licence 2'), ('L3', 'Licence 3'), ('M1', 'Master 1'), ('M2', 'Master 2')], max_length=20)),
                ('filiere', models.CharField(blank=True, help_text="Filière d'étude", max_length=100)),
                ('emergency_contact', models.CharField(blank=True, help_text="Contact d'urgence", max_length=100)),
                ('emergency_phone', models.CharField(blank=True, help_text="Téléphone d'urgence", max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profil Étudiant',
                'verbose_name_plural': 'Profils Étudiants',
            },
        ),
    ]
