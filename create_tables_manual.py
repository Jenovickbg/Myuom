#!/usr/bin/env python
import os
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'MyUOM.settings')
django.setup()

from django.db import connection

print("üîß Cr√©ation manuelle des tables...")

with connection.cursor() as cursor:
    # Cr√©er la table users_faculte
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_faculte (
            id INT AUTO_INCREMENT PRIMARY KEY,
            code VARCHAR(10) NOT NULL UNIQUE,
            nom VARCHAR(100) NOT NULL,
            description TEXT,
            is_active BOOLEAN DEFAULT TRUE,
            created_at DATETIME(6) NOT NULL,
            updated_at DATETIME(6) NOT NULL
        );
    """)
    
    # Cr√©er la table users_promotion
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_promotion (
            id INT AUTO_INCREMENT PRIMARY KEY,
            annee_debut INT NOT NULL,
            annee_fin INT NOT NULL,
            is_active BOOLEAN DEFAULT TRUE,
            created_at DATETIME(6) NOT NULL,
            updated_at DATETIME(6) NOT NULL,
            UNIQUE KEY unique_promotion_years (annee_debut, annee_fin)
        );
    """)
    
    # Cr√©er la table users_customuser
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_customuser (
            id INT AUTO_INCREMENT PRIMARY KEY,
            password VARCHAR(128) NOT NULL,
            last_login DATETIME(6),
            is_superuser BOOLEAN NOT NULL,
            username VARCHAR(150) NOT NULL UNIQUE,
            first_name VARCHAR(150) NOT NULL,
            last_name VARCHAR(150) NOT NULL,
            email VARCHAR(254),
            is_staff BOOLEAN NOT NULL,
            is_active BOOLEAN NOT NULL,
            date_joined DATETIME(6) NOT NULL,
            matricule VARCHAR(15) NOT NULL UNIQUE,
            user_type VARCHAR(20) NOT NULL,
            birth_date DATE,
            birth_place VARCHAR(100),
            phone VARCHAR(15),
            is_first_login BOOLEAN NOT NULL,
            is_active_student BOOLEAN NOT NULL,
            created_at DATETIME(6) NOT NULL,
            updated_at DATETIME(6) NOT NULL
        );
    """)
    
    # Cr√©er la table users_studentprofile
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_studentprofile (
            id INT AUTO_INCREMENT PRIMARY KEY,
            photo VARCHAR(100),
            niveau VARCHAR(20),
            filiere VARCHAR(100),
            faculte_id INT,
            promotion_id INT,
            emergency_contact VARCHAR(100),
            emergency_phone VARCHAR(15),
            created_at DATETIME(6) NOT NULL,
            updated_at DATETIME(6) NOT NULL,
            user_id INT NOT NULL UNIQUE,
            FOREIGN KEY (user_id) REFERENCES users_customuser(id) ON DELETE CASCADE,
            FOREIGN KEY (faculte_id) REFERENCES users_faculte(id) ON DELETE SET NULL,
            FOREIGN KEY (promotion_id) REFERENCES users_promotion(id) ON DELETE SET NULL
        );
    """)
    
    # Cr√©er la table users_teacherprofile
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users_teacherprofile (
            id INT AUTO_INCREMENT PRIMARY KEY,
            department VARCHAR(100),
            speciality VARCHAR(100),
            office VARCHAR(100),
            created_at DATETIME(6) NOT NULL,
            updated_at DATETIME(6) NOT NULL,
            user_id INT NOT NULL UNIQUE,
            FOREIGN KEY (user_id) REFERENCES users_customuser(id) ON DELETE CASCADE
        );
    """)
    
    print("‚úÖ Tables cr√©√©es avec succ√®s!")

print("üèõÔ∏è Cr√©ation des facult√©s...")
from users.models import Faculte, Promotion

facultes = [
    ('FSI', 'Facult√© des Sciences de l\'Ing√©nieur', 'Formation en ing√©nierie et technologies'),
    ('FSEG', 'Facult√© des Sciences √âconomiques et de Gestion', 'Formation en √©conomie et gestion'),
    ('FAS', 'Facult√© des Arts et Sciences', 'Formation en arts et sciences humaines'),
    ('FDS', 'Facult√© de Droit et Sciences Politiques', 'Formation en droit et sciences politiques'),
    ('FMS', 'Facult√© de M√©decine et Sciences de la Sant√©', 'Formation en m√©decine et sciences de la sant√©'),
]

for code, nom, desc in facultes:
    faculte = Faculte.objects.create(code=code, nom=nom, description=desc)
    print(f"‚úÖ {code} - {nom}")

print("\nüìÖ Cr√©ation des promotions...")
promotions = [
    (2020, 2021),
    (2021, 2022),
    (2022, 2023),
    (2023, 2024),
    (2024, 2025),
    (2025, 2026),
]

for debut, fin in promotions:
    promotion = Promotion.objects.create(annee_debut=debut, annee_fin=fin)
    print(f"‚úÖ {debut}-{fin}")

print("\nüéâ Base de donn√©es r√©initialis√©e avec succ√®s!")
print("üìù Tu peux maintenant cr√©er des √©tudiants avec les nouvelles facult√©s et promotions.")
